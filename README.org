* First tests - mac only. CHIP Pro does not load python-osc!
  :PROPERTIES:
  :DATE:     <2018-03-17 Sat 19:05>
  :END:
The package is python-osc

https://pypi.python.org/pypi/python-osc

Installed on macos with: 

: pip install python-osc

Here are the two python scripts that were tried out sucessfully on mac:

#+BEGIN_SRC python
"""Small example OSC client

This program sends 10 random values between 0.0 and 1.0 to the /filter address,
waiting for 1 seconds between each value.
"""
import argparse
import random
import time

from pythonosc import osc_message_builder
from pythonosc import udp_client

print("hello world")

client = udp_client.SimpleUDPClient("127.0.0.1", 57120)

for x in range(10) :
    number = random.random()
    client.send_message("/filter", [number, "I can also send strings"])
    print("hello world")
    time.sleep(0.1)

print("DONE")
#+END_SRC

#+BEGIN_SRC python
"""Small example OSC server

This program listens to several addresses, and prints some information about
received packets.
"""
import argparse
import math

from pythonosc import dispatcher
from pythonosc import osc_server

def print_volume_handler(unused_addr, args, volume):
  print("[{0}] ~ {1}".format(args[0], volume))

def print_compute_handler(unused_addr, args, volume):
  try:
    print("[{0}] ~ {1}".format(args[0], args[1](volume)))
  except ValueError: pass

dispatcher = dispatcher.Dispatcher()
dispatcher.map("/filter", print)
dispatcher.map("/volume", print_volume_handler, "Volume")
dispatcher.map("/logvolume", print_compute_handler, "Log volume", math.log)

server = osc_server.ThreadingOSCUDPServer(
    ("127.0.0.1", 57130), dispatcher)
print("Serving on {}".format(server.server_address))
server.serve_forever()
#+END_SRC

And this is the sc code used for receiving and the data from python:

#+BEGIN_SRC sclang
OSCFunc({ | args |
	"OSCFunc received the following values from message '/filter':".postln;
	args[1..].postln;
}, '/filter');
#+END_SRC
* Test with SC only, including simple benchmark with Date
** Sender

 #+BEGIN_SRC sclang

   //:+ // using snippets to loop this inside a routine. Type C-M-x to run in EMACS
   var addr;
   addr = NetAddr("195.251.111.114", 57120);
   50 do: {
           postf("sending to: %\n", addr);
           Date.getDate.hourStamp.postln;
           addr.sendMsg('/test', 1, 2, 3, Date.getDate.hourStamp);
           1.wait;
   }
 #+END_SRC
** Receiver

 #+BEGIN_SRC sclang

   //: OSCFunc to match above message - comparing time sent with time received.
   /* This comparison depends on synchronizing the clocks of the sending and the receiving 
   Computer.  Some info:
   https://superuser.com/questions/155785/mac-os-x-date-time-synchronization
   Example:
   To manually update time with NTP, use ntpdate from a shell:

   ntpdate -vuserver or IP address
   ex:

   sudo ntpdate -u time.apple.com

   We did not run this, but we got a delay of less than 40ms between athens (home, wifi) and corfu (pearl, ethernet).
   Comparing time sent with time received. Message: [ 2, 3, 13:28:14.0632 ] - TIMESTAMP: 13:28:14.0953
   Comparing time sent with time received. Message: [ 2, 3, 13:28:15.0632 ] - TIMESTAMP: 13:28:15.0966
   ,*/
   OSCFunc({ | msg |
           var timestamp;
           timestamp = Date.getDate.hourStamp;
           postf("Comparing time sent with time received. Message: % - TIMESTAMP: %\n", msg[2..], timestamp);
   }, '/test')

 #+END_SRC
